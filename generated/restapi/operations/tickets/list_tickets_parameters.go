package tickets

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/SecurityBrewery/catalyst/generated/restapi/api"
)

// ListTicketsEndpoint executes the core logic of the related
// route endpoint.
func ListTicketsEndpoint(handler func(ctx context.Context, params *ListTicketsParams) *api.Response) gin.HandlerFunc {
	return func(ctx *gin.Context) {

		// generate params from request
		params := NewListTicketsParams()
		err := params.ReadRequest(ctx)
		if err != nil {
			errObj := err.(*errors.CompositeError)
			ctx.Writer.Header().Set("Content-Type", "application/problem+json")
			ctx.JSON(int(errObj.Code()), gin.H{"error": errObj.Error()})
			return
		}

		resp := handler(ctx, params)

		switch resp.Code {
		case http.StatusNoContent:
			ctx.AbortWithStatus(resp.Code)
		default:
			ctx.JSON(resp.Code, resp.Body)
		}
	}
}

// NewListTicketsParams creates a new ListTicketsParams object
// with the default values initialized.
func NewListTicketsParams() *ListTicketsParams {
	var (
		countDefault  = int64(25)
		offsetDefault = int64(0)
	)
	return &ListTicketsParams{
		Count: &countDefault,

		Offset: &offsetDefault,
	}
}

// ListTicketsParams contains all the bound params for the list tickets operation
// typically these are obtained from a http.Request
//
// swagger:parameters listTickets
type ListTicketsParams struct {

	/*Number of tickets
	  Maximum: 100
	  In: query
	  Default: 25
	*/
	Count *int64
	/*Sort descending
	  In: query
	*/
	Desc []bool
	/*Offset of the list
	  In: query
	  Default: 0
	*/
	Offset *int64
	/*Search query
	  In: query
	*/
	Query *string
	/*Sort columns
	  In: query
	*/
	Sort []string
	/*Ticket Type
	  In: query
	*/
	Type *string
}

// ReadRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls
func (o *ListTicketsParams) ReadRequest(ctx *gin.Context) error {
	var res []error
	qs := runtime.Values(ctx.Request.URL.Query())

	qCount, qhkCount, _ := qs.GetOK("count")
	if err := o.bindCount(qCount, qhkCount); err != nil {
		res = append(res, err)
	}

	qDesc, qhkDesc, _ := qs.GetOK("desc")
	if err := o.bindDesc(qDesc, qhkDesc); err != nil {
		res = append(res, err)
	}

	qOffset, qhkOffset, _ := qs.GetOK("offset")
	if err := o.bindOffset(qOffset, qhkOffset); err != nil {
		res = append(res, err)
	}

	qQuery, qhkQuery, _ := qs.GetOK("query")
	if err := o.bindQuery(qQuery, qhkQuery); err != nil {
		res = append(res, err)
	}

	qSort, qhkSort, _ := qs.GetOK("sort")
	if err := o.bindSort(qSort, qhkSort); err != nil {
		res = append(res, err)
	}

	qType, qhkType, _ := qs.GetOK("type")
	if err := o.bindType(qType, qhkType); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListTicketsParams) bindCount(rawData []string, hasKey bool) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		var countDefault int64 = int64(25)
		o.Count = &countDefault
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("count", "query", "int64", raw)
	}
	o.Count = &value

	if err := o.validateCount(); err != nil {
		return err
	}

	return nil
}

func (o *ListTicketsParams) validateCount() error {

	if err := validate.MaximumInt("count", "query", int64(*o.Count), 100, false); err != nil {
		return err
	}

	return nil
}

func (o *ListTicketsParams) bindDesc(rawData []string, hasKey bool) error {

	var qvDesc string
	if len(rawData) > 0 {
		qvDesc = rawData[len(rawData)-1]
	}

	descIC := swag.SplitByFormat(qvDesc, "")

	if len(descIC) == 0 {
		return nil
	}

	var descIR []bool
	for i, descIV := range descIC {
		descI, err := swag.ConvertBool(descIV)
		if err != nil {
			return errors.InvalidType(fmt.Sprintf("%s.%v", "desc", i), "query", "bool", descI)
		}

		descIR = append(descIR, descI)
	}

	o.Desc = descIR

	return nil
}

func (o *ListTicketsParams) bindOffset(rawData []string, hasKey bool) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		var offsetDefault int64 = int64(0)
		o.Offset = &offsetDefault
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("offset", "query", "int64", raw)
	}
	o.Offset = &value

	return nil
}

func (o *ListTicketsParams) bindQuery(rawData []string, hasKey bool) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.Query = &raw

	return nil
}

func (o *ListTicketsParams) bindSort(rawData []string, hasKey bool) error {

	var qvSort string
	if len(rawData) > 0 {
		qvSort = rawData[len(rawData)-1]
	}

	sortIC := swag.SplitByFormat(qvSort, "")

	if len(sortIC) == 0 {
		return nil
	}

	var sortIR []string
	for _, sortIV := range sortIC {
		sortI := sortIV

		sortIR = append(sortIR, sortI)
	}

	o.Sort = sortIR

	return nil
}

func (o *ListTicketsParams) bindType(rawData []string, hasKey bool) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.Type = &raw

	return nil
}
