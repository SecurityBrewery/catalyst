// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package sqlc

import (
	"context"
)

const commitSession = `-- name: CommitSession :exec
INSERT OR
REPLACE
INTO sessions (token, data, expiry)
VALUES (?1, ?2, ?3)
`

type CommitSessionParams struct {
	Token  string `json:"token"`
	Data   []byte `json:"data"`
	Expiry int64  `json:"expiry"`
}

func (q *Queries) CommitSession(ctx context.Context, arg CommitSessionParams) error {
	_, err := q.db.ExecContext(ctx, commitSession, arg.Token, arg.Data, arg.Expiry)
	return err
}

const createTicket = `-- name: CreateTicket :execlastid
INSERT INTO tickets (name)
VALUES (?1)
`

func (q *Queries) CreateTicket(ctx context.Context, name string) (int64, error) {
	result, err := q.db.ExecContext(ctx, createTicket, name)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}

const deleteSession = `-- name: DeleteSession :exec
DELETE
FROM sessions
WHERE token = ?1
`

func (q *Queries) DeleteSession(ctx context.Context, token string) error {
	_, err := q.db.ExecContext(ctx, deleteSession, token)
	return err
}

const deleteTicket = `-- name: DeleteTicket :exec
DELETE
FROM tickets
WHERE id = ?1
`

func (q *Queries) DeleteTicket(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteTicket, id)
	return err
}

const findSession = `-- name: FindSession :one

SELECT token, data, expiry
FROM sessions
WHERE token = ?1
`

// ----------------------------------------------------------------
func (q *Queries) FindSession(ctx context.Context, token string) (Session, error) {
	row := q.db.QueryRowContext(ctx, findSession, token)
	var i Session
	err := row.Scan(&i.Token, &i.Data, &i.Expiry)
	return i, err
}

const listTickets = `-- name: ListTickets :many
SELECT created, description, id, name, open, owner, resolution, schema, state, type, updated
FROM tickets
ORDER BY created DESC
LIMIT ?2 OFFSET ?1
`

type ListTicketsParams struct {
	Offset int64 `json:"offset"`
	Limit  int64 `json:"limit"`
}

func (q *Queries) ListTickets(ctx context.Context, arg ListTicketsParams) ([]Ticket, error) {
	rows, err := q.db.QueryContext(ctx, listTickets, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Ticket
	for rows.Next() {
		var i Ticket
		if err := rows.Scan(
			&i.Created,
			&i.Description,
			&i.ID,
			&i.Name,
			&i.Open,
			&i.Owner,
			&i.Resolution,
			&i.Schema,
			&i.State,
			&i.Type,
			&i.Updated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ticket = `-- name: Ticket :one
SELECT created, description, id, name, open, owner, resolution, schema, state, type, updated
FROM tickets
WHERE id = ?1
`

func (q *Queries) Ticket(ctx context.Context, id string) (Ticket, error) {
	row := q.db.QueryRowContext(ctx, ticket, id)
	var i Ticket
	err := row.Scan(
		&i.Created,
		&i.Description,
		&i.ID,
		&i.Name,
		&i.Open,
		&i.Owner,
		&i.Resolution,
		&i.Schema,
		&i.State,
		&i.Type,
		&i.Updated,
	)
	return i, err
}

const updateTicket = `-- name: UpdateTicket :exec
UPDATE tickets
SET name = ?1
WHERE id = ?2
`

type UpdateTicketParams struct {
	Name string `json:"name"`
	ID   string `json:"id"`
}

func (q *Queries) UpdateTicket(ctx context.Context, arg UpdateTicketParams) error {
	_, err := q.db.ExecContext(ctx, updateTicket, arg.Name, arg.ID)
	return err
}
