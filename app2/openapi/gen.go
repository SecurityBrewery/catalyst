// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

// Defines values for AuthenticationSchemeType.
const (
	Httpbasic        AuthenticationSchemeType = "httpbasic"
	Httpdigest       AuthenticationSchemeType = "httpdigest"
	Oauth            AuthenticationSchemeType = "oauth"
	Oauth2           AuthenticationSchemeType = "oauth2"
	Oauthbearertoken AuthenticationSchemeType = "oauthbearertoken"
)

// Defines values for GroupSchemas.
const (
	GroupSchemasUrnIetfParamsScimSchemasCore20Group GroupSchemas = "urn:ietf:params:scim:schemas:core:2.0:Group"
)

// Defines values for GroupResponseSchemas.
const (
	GroupResponseSchemasUrnIetfParamsScimSchemasCore20Group GroupResponseSchemas = "urn:ietf:params:scim:schemas:core:2.0:Group"
)

// Defines values for MetaResourceType.
const (
	MetaResourceTypeGroup      MetaResourceType = "Group"
	MetaResourceTypePermission MetaResourceType = "Permission"
	MetaResourceTypeUser       MetaResourceType = "User"
)

// Defines values for PermissionSchemas.
const (
	PermissionSchemasUrnIetfParamsScimSchemasCore20Permission PermissionSchemas = "urn:ietf:params:scim:schemas:core:2.0:Permission"
)

// Defines values for PermissionResponseSchemas.
const (
	PermissionResponseSchemasUrnIetfParamsScimSchemasCore20Permission PermissionResponseSchemas = "urn:ietf:params:scim:schemas:core:2.0:Permission"
)

// Defines values for ResourceTypeSchemas.
const (
	UrnIetfParamsScimSchemasCore20ResourceType ResourceTypeSchemas = "urn:ietf:params:scim:schemas:core:2.0:ResourceType"
)

// Defines values for SchemaSchemas.
const (
	UrnIetfParamsScimSchemasCore20Schema SchemaSchemas = "urn:ietf:params:scim:schemas:core:2.0:Schema"
)

// Defines values for SchemaAttributeMutability.
const (
	Immutable SchemaAttributeMutability = "immutable"
	Readonly  SchemaAttributeMutability = "readonly"
	Readwrite SchemaAttributeMutability = "readwrite"
	Writeonly SchemaAttributeMutability = "writeonly"
)

// Defines values for SchemaAttributeReturned.
const (
	Always  SchemaAttributeReturned = "always"
	Default SchemaAttributeReturned = "default"
	Never   SchemaAttributeReturned = "never"
	Request SchemaAttributeReturned = "request"
)

// Defines values for SchemaAttributeUniqueness.
const (
	Global SchemaAttributeUniqueness = "global"
	None   SchemaAttributeUniqueness = "none"
	Server SchemaAttributeUniqueness = "server"
)

// Defines values for ServiceProviderConfigSchemas.
const (
	UrnIetfParamsScimSchemasCore20ServiceProviderConfig ServiceProviderConfigSchemas = "urn:ietf:params:scim:schemas:core:2.0:ServiceProviderConfig"
)

// Defines values for UserSchemas.
const (
	UserSchemasUrnIetfParamsScimSchemasCore20User UserSchemas = "urn:ietf:params:scim:schemas:core:2.0:User"
)

// Defines values for UserResponseSchemas.
const (
	UserResponseSchemasUrnIetfParamsScimSchemasCore20User UserResponseSchemas = "urn:ietf:params:scim:schemas:core:2.0:User"
)

// Defines values for GetGroupsParamsSortOrder.
const (
	GetGroupsParamsSortOrderAscending  GetGroupsParamsSortOrder = "ascending"
	GetGroupsParamsSortOrderDescending GetGroupsParamsSortOrder = "descending"
)

// Defines values for GetUsersParamsSortOrder.
const (
	GetUsersParamsSortOrderAscending  GetUsersParamsSortOrder = "ascending"
	GetUsersParamsSortOrderDescending GetUsersParamsSortOrder = "descending"
)

// AuthenticationScheme defines model for AuthenticationScheme.
type AuthenticationScheme struct {
	Description      string                   `json:"description"`
	DocumentationUri *string                  `json:"documentationUri,omitempty"`
	Name             string                   `json:"name"`
	SpecUri          *string                  `json:"specUri,omitempty"`
	Type             AuthenticationSchemeType `json:"type"`
}

// AuthenticationSchemeType defines model for AuthenticationScheme.Type.
type AuthenticationSchemeType string

// ComplexAttribute defines model for ComplexAttribute.
type ComplexAttribute = []struct {
	Value string `json:"value"`
}

// ComplexAttributeResponse defines model for ComplexAttributeResponse.
type ComplexAttributeResponse = []struct {
	Primary *bool   `json:"primary,omitempty"`
	Type    *string `json:"type,omitempty"`
	Value   string  `json:"value"`
}

// Group defines model for Group.
type Group struct {
	DisplayName string            `json:"displayName"`
	Managed     *bool             `json:"managed,omitempty"`
	Members     *ComplexAttribute `json:"members,omitempty"`
	Permissions *ComplexAttribute `json:"permissions,omitempty"`
	Schemas     *[]GroupSchemas   `json:"schemas,omitempty"`
}

// GroupSchemas defines model for Group.Schemas.
type GroupSchemas string

// GroupResponse defines model for GroupResponse.
type GroupResponse struct {
	DisplayName string                    `json:"displayName"`
	Id          string                    `json:"id"`
	Managed     *bool                     `json:"managed,omitempty"`
	Members     *ComplexAttributeResponse `json:"members,omitempty"`
	Meta        Meta                      `json:"meta"`
	Permissions *ComplexAttributeResponse `json:"permissions,omitempty"`
	Schemas     []GroupResponseSchemas    `json:"schemas"`
}

// GroupResponseSchemas defines model for GroupResponse.Schemas.
type GroupResponseSchemas string

// Meta defines model for Meta.
type Meta struct {
	Created      time.Time        `json:"created"`
	LastModified time.Time        `json:"lastModified"`
	Location     string           `json:"location"`
	ResourceType MetaResourceType `json:"resourceType"`
	Version      *string          `json:"version,omitempty"`
}

// MetaResourceType defines model for Meta.ResourceType.
type MetaResourceType string

// Permission defines model for Permission.
type Permission struct {
	DisplayName string              `json:"displayName"`
	Managed     *bool               `json:"managed,omitempty"`
	Schemas     []PermissionSchemas `json:"schemas"`
}

// PermissionSchemas defines model for Permission.Schemas.
type PermissionSchemas string

// PermissionResponse defines model for PermissionResponse.
type PermissionResponse struct {
	DisplayName string                      `json:"displayName"`
	Id          string                      `json:"id"`
	Managed     *bool                       `json:"managed,omitempty"`
	Meta        Meta                        `json:"meta"`
	Schemas     []PermissionResponseSchemas `json:"schemas"`
}

// PermissionResponseSchemas defines model for PermissionResponse.Schemas.
type PermissionResponseSchemas string

// ResourceType defines model for ResourceType.
type ResourceType struct {
	Description      *string                        `json:"description,omitempty"`
	Endpoint         string                         `json:"endpoint"`
	Id               *string                        `json:"id,omitempty"`
	Name             string                         `json:"name"`
	Schema           string                         `json:"schema"`
	SchemaExtensions *[]ResourceTypeSchemaExtension `json:"schemaExtensions,omitempty"`
	Schemas          []ResourceTypeSchemas          `json:"schemas"`
}

// ResourceTypeSchemas defines model for ResourceType.Schemas.
type ResourceTypeSchemas string

// ResourceTypeSchemaExtension defines model for ResourceTypeSchemaExtension.
type ResourceTypeSchemaExtension struct {
	Required bool   `json:"required"`
	Schema   string `json:"schema"`
}

// Schema defines model for Schema.
type Schema struct {
	Attributes  []SchemaAttribute `json:"attributes"`
	Description *string           `json:"description,omitempty"`
	Id          string            `json:"id"`
	Name        *string           `json:"name,omitempty"`
	Schemas     []SchemaSchemas   `json:"schemas"`
}

// SchemaSchemas defines model for Schema.Schemas.
type SchemaSchemas string

// SchemaAttribute defines model for SchemaAttribute.
type SchemaAttribute struct {
	CanonicalValues *[]string                 `json:"canonicalValues,omitempty"`
	CaseExact       *bool                     `json:"caseExact,omitempty"`
	Description     *string                   `json:"description,omitempty"`
	MultiValued     bool                      `json:"multiValued"`
	Mutability      SchemaAttributeMutability `json:"mutability"`
	Name            string                    `json:"name"`
	ReferenceTypes  *[]string                 `json:"referenceTypes,omitempty"`
	Required        *bool                     `json:"required,omitempty"`
	Returned        SchemaAttributeReturned   `json:"returned"`
	SubAttributes   *[]SchemaAttribute        `json:"subAttributes,omitempty"`
	Type            string                    `json:"type"`
	Uniqueness      SchemaAttributeUniqueness `json:"uniqueness"`
}

// SchemaAttributeMutability defines model for SchemaAttribute.Mutability.
type SchemaAttributeMutability string

// SchemaAttributeReturned defines model for SchemaAttribute.Returned.
type SchemaAttributeReturned string

// SchemaAttributeUniqueness defines model for SchemaAttribute.Uniqueness.
type SchemaAttributeUniqueness string

// ServiceProviderConfig defines model for ServiceProviderConfig.
type ServiceProviderConfig struct {
	AuthenticationSchemes []AuthenticationScheme `json:"authenticationSchemes"`
	Bulk                  struct {
		MaxOperations  int  `json:"maxOperations"`
		MaxPayloadSize int  `json:"maxPayloadSize"`
		Supported      bool `json:"supported"`
	} `json:"bulk"`
	ChangePassword struct {
		Supported bool `json:"supported"`
	} `json:"changePassword"`
	DocumentationUri string `json:"documentationUri"`
	Etag             struct {
		Supported bool `json:"supported"`
	} `json:"etag"`
	Filter struct {
		MaxResults int  `json:"maxResults"`
		Supported  bool `json:"supported"`
	} `json:"filter"`
	Patch struct {
		Supported bool `json:"supported"`
	} `json:"patch"`
	Schemas []ServiceProviderConfigSchemas `json:"schemas"`
	Sort    struct {
		Supported bool `json:"supported"`
	} `json:"sort"`
}

// ServiceProviderConfigSchemas defines model for ServiceProviderConfig.Schemas.
type ServiceProviderConfigSchemas string

// User defines model for User.
type User struct {
	Active      bool              `json:"active"`
	DisplayName *string           `json:"displayName,omitempty"`
	Emails      *ComplexAttribute `json:"emails,omitempty"`
	Ims         *ComplexAttribute `json:"ims,omitempty"`
	Locale      *string           `json:"locale,omitempty"`
	Name        struct {
		FamilyName string `json:"familyName"`
		GivenName  string `json:"givenName"`
	} `json:"name"`
	Password     *string           `json:"password,omitempty"`
	PhoneNumbers *ComplexAttribute `json:"phoneNumbers,omitempty"`
	Schemas      []UserSchemas     `json:"schemas"`
	Timezone     *string           `json:"timezone,omitempty"`
	Title        *string           `json:"title,omitempty"`
	UserName     string            `json:"userName"`
	UserType     *string           `json:"userType,omitempty"`
}

// UserSchemas defines model for User.Schemas.
type UserSchemas string

// UserResponse defines model for UserResponse.
type UserResponse struct {
	Active      bool                      `json:"active"`
	DisplayName *string                   `json:"displayName,omitempty"`
	Emails      ComplexAttributeResponse  `json:"emails"`
	Groups      *ComplexAttributeResponse `json:"groups,omitempty"`
	Id          string                    `json:"id"`
	Ims         ComplexAttributeResponse  `json:"ims"`
	Locale      *string                   `json:"locale,omitempty"`
	Meta        Meta                      `json:"meta"`
	Name        struct {
		FamilyName string `json:"familyName"`
		GivenName  string `json:"givenName"`
	} `json:"name"`
	Password     *string                   `json:"password,omitempty"`
	Permissions  *ComplexAttributeResponse `json:"permissions,omitempty"`
	PhoneNumbers ComplexAttributeResponse  `json:"phoneNumbers"`
	Schemas      []UserResponseSchemas     `json:"schemas"`
	Timezone     *string                   `json:"timezone,omitempty"`
	Title        *string                   `json:"title,omitempty"`
	UserName     string                    `json:"userName"`
	UserType     *string                   `json:"userType,omitempty"`
}

// UserResponseSchemas defines model for UserResponse.Schemas.
type UserResponseSchemas string

// GetGroupsParams defines parameters for GetGroups.
type GetGroupsParams struct {
	Attributes         *string                   `form:"attributes,omitempty" json:"attributes,omitempty"`
	ExcludedAttributes *string                   `form:"excludedAttributes,omitempty" json:"excludedAttributes,omitempty"`
	SortBy             *string                   `form:"sortBy,omitempty" json:"sortBy,omitempty"`
	SortOrder          *GetGroupsParamsSortOrder `form:"sortOrder,omitempty" json:"sortOrder,omitempty"`
	StartIndex         *int                      `form:"startIndex,omitempty" json:"startIndex,omitempty"`
	Count              *int                      `form:"count,omitempty" json:"count,omitempty"`
}

// GetGroupsParamsSortOrder defines parameters for GetGroups.
type GetGroupsParamsSortOrder string

// GetUsersParams defines parameters for GetUsers.
type GetUsersParams struct {
	Attributes         *string                  `form:"attributes,omitempty" json:"attributes,omitempty"`
	ExcludedAttributes *string                  `form:"excludedAttributes,omitempty" json:"excludedAttributes,omitempty"`
	Filter             *string                  `form:"filter,omitempty" json:"filter,omitempty"`
	SortBy             *string                  `form:"sortBy,omitempty" json:"sortBy,omitempty"`
	SortOrder          *GetUsersParamsSortOrder `form:"sortOrder,omitempty" json:"sortOrder,omitempty"`
	StartIndex         *int                     `form:"startIndex,omitempty" json:"startIndex,omitempty"`
	Count              *int                     `form:"count,omitempty" json:"count,omitempty"`
}

// GetUsersParamsSortOrder defines parameters for GetUsers.
type GetUsersParamsSortOrder string

// CreateGroupJSONRequestBody defines body for CreateGroup for application/json ContentType.
type CreateGroupJSONRequestBody = Group

// ReplaceGroupJSONRequestBody defines body for ReplaceGroup for application/json ContentType.
type ReplaceGroupJSONRequestBody = Group

// CreateUserJSONRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody = User

// ReplaceUserJSONRequestBody defines body for ReplaceUser for application/json ContentType.
type ReplaceUserJSONRequestBody = User

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Retrieve all groups
	// (GET /Groups)
	GetGroups(w http.ResponseWriter, r *http.Request, params GetGroupsParams)
	// Create a new group
	// (POST /Groups)
	CreateGroup(w http.ResponseWriter, r *http.Request)
	// Delete a group by ID
	// (DELETE /Groups/{id})
	DeleteGroup(w http.ResponseWriter, r *http.Request, id string)
	// Retrieve a group by ID
	// (GET /Groups/{id})
	GetGroupById(w http.ResponseWriter, r *http.Request, id string)
	// Replace a group by ID
	// (PUT /Groups/{id})
	ReplaceGroup(w http.ResponseWriter, r *http.Request, id string)
	// Retrieve all resource types
	// (GET /ResourceTypes)
	GetResourceTypes(w http.ResponseWriter, r *http.Request)
	// Retrieve all schemas
	// (GET /Schemas)
	GetSchemas(w http.ResponseWriter, r *http.Request)
	// Retrieve the service provider configuration
	// (GET /ServiceProviderConfig)
	GetServiceProviderConfig(w http.ResponseWriter, r *http.Request)
	// Retrieve all users
	// (GET /Users)
	GetUsers(w http.ResponseWriter, r *http.Request, params GetUsersParams)
	// Create a new user
	// (POST /Users)
	CreateUser(w http.ResponseWriter, r *http.Request)
	// Delete a user by ID
	// (DELETE /Users/{id})
	DeleteUser(w http.ResponseWriter, r *http.Request, id string)
	// Retrieve a user by ID
	// (GET /Users/{id})
	GetUserById(w http.ResponseWriter, r *http.Request, id string)
	// Replace a user by ID
	// (PUT /Users/{id})
	ReplaceUser(w http.ResponseWriter, r *http.Request, id string)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Retrieve all groups
// (GET /Groups)
func (_ Unimplemented) GetGroups(w http.ResponseWriter, r *http.Request, params GetGroupsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new group
// (POST /Groups)
func (_ Unimplemented) CreateGroup(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a group by ID
// (DELETE /Groups/{id})
func (_ Unimplemented) DeleteGroup(w http.ResponseWriter, r *http.Request, id string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Retrieve a group by ID
// (GET /Groups/{id})
func (_ Unimplemented) GetGroupById(w http.ResponseWriter, r *http.Request, id string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Replace a group by ID
// (PUT /Groups/{id})
func (_ Unimplemented) ReplaceGroup(w http.ResponseWriter, r *http.Request, id string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Retrieve all resource types
// (GET /ResourceTypes)
func (_ Unimplemented) GetResourceTypes(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Retrieve all schemas
// (GET /Schemas)
func (_ Unimplemented) GetSchemas(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Retrieve the service provider configuration
// (GET /ServiceProviderConfig)
func (_ Unimplemented) GetServiceProviderConfig(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Retrieve all users
// (GET /Users)
func (_ Unimplemented) GetUsers(w http.ResponseWriter, r *http.Request, params GetUsersParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new user
// (POST /Users)
func (_ Unimplemented) CreateUser(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a user by ID
// (DELETE /Users/{id})
func (_ Unimplemented) DeleteUser(w http.ResponseWriter, r *http.Request, id string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Retrieve a user by ID
// (GET /Users/{id})
func (_ Unimplemented) GetUserById(w http.ResponseWriter, r *http.Request, id string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Replace a user by ID
// (PUT /Users/{id})
func (_ Unimplemented) ReplaceUser(w http.ResponseWriter, r *http.Request, id string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetGroups operation middleware
func (siw *ServerInterfaceWrapper) GetGroups(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetGroupsParams

	// ------------- Optional query parameter "attributes" -------------

	err = runtime.BindQueryParameter("form", true, false, "attributes", r.URL.Query(), &params.Attributes)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "attributes", Err: err})
		return
	}

	// ------------- Optional query parameter "excludedAttributes" -------------

	err = runtime.BindQueryParameter("form", true, false, "excludedAttributes", r.URL.Query(), &params.ExcludedAttributes)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "excludedAttributes", Err: err})
		return
	}

	// ------------- Optional query parameter "sortBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "sortBy", r.URL.Query(), &params.SortBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sortBy", Err: err})
		return
	}

	// ------------- Optional query parameter "sortOrder" -------------

	err = runtime.BindQueryParameter("form", true, false, "sortOrder", r.URL.Query(), &params.SortOrder)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sortOrder", Err: err})
		return
	}

	// ------------- Optional query parameter "startIndex" -------------

	err = runtime.BindQueryParameter("form", true, false, "startIndex", r.URL.Query(), &params.StartIndex)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "startIndex", Err: err})
		return
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", r.URL.Query(), &params.Count)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "count", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetGroups(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateGroup operation middleware
func (siw *ServerInterfaceWrapper) CreateGroup(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateGroup(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteGroup operation middleware
func (siw *ServerInterfaceWrapper) DeleteGroup(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteGroup(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetGroupById operation middleware
func (siw *ServerInterfaceWrapper) GetGroupById(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetGroupById(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ReplaceGroup operation middleware
func (siw *ServerInterfaceWrapper) ReplaceGroup(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ReplaceGroup(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetResourceTypes operation middleware
func (siw *ServerInterfaceWrapper) GetResourceTypes(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetResourceTypes(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetSchemas operation middleware
func (siw *ServerInterfaceWrapper) GetSchemas(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSchemas(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetServiceProviderConfig operation middleware
func (siw *ServerInterfaceWrapper) GetServiceProviderConfig(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetServiceProviderConfig(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetUsers operation middleware
func (siw *ServerInterfaceWrapper) GetUsers(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUsersParams

	// ------------- Optional query parameter "attributes" -------------

	err = runtime.BindQueryParameter("form", true, false, "attributes", r.URL.Query(), &params.Attributes)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "attributes", Err: err})
		return
	}

	// ------------- Optional query parameter "excludedAttributes" -------------

	err = runtime.BindQueryParameter("form", true, false, "excludedAttributes", r.URL.Query(), &params.ExcludedAttributes)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "excludedAttributes", Err: err})
		return
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", r.URL.Query(), &params.Filter)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filter", Err: err})
		return
	}

	// ------------- Optional query parameter "sortBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "sortBy", r.URL.Query(), &params.SortBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sortBy", Err: err})
		return
	}

	// ------------- Optional query parameter "sortOrder" -------------

	err = runtime.BindQueryParameter("form", true, false, "sortOrder", r.URL.Query(), &params.SortOrder)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sortOrder", Err: err})
		return
	}

	// ------------- Optional query parameter "startIndex" -------------

	err = runtime.BindQueryParameter("form", true, false, "startIndex", r.URL.Query(), &params.StartIndex)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "startIndex", Err: err})
		return
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", r.URL.Query(), &params.Count)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "count", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUsers(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateUser operation middleware
func (siw *ServerInterfaceWrapper) CreateUser(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateUser(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteUser operation middleware
func (siw *ServerInterfaceWrapper) DeleteUser(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteUser(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetUserById operation middleware
func (siw *ServerInterfaceWrapper) GetUserById(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUserById(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ReplaceUser operation middleware
func (siw *ServerInterfaceWrapper) ReplaceUser(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ReplaceUser(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/Groups", wrapper.GetGroups)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/Groups", wrapper.CreateGroup)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/Groups/{id}", wrapper.DeleteGroup)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/Groups/{id}", wrapper.GetGroupById)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/Groups/{id}", wrapper.ReplaceGroup)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/ResourceTypes", wrapper.GetResourceTypes)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/Schemas", wrapper.GetSchemas)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/ServiceProviderConfig", wrapper.GetServiceProviderConfig)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/Users", wrapper.GetUsers)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/Users", wrapper.CreateUser)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/Users/{id}", wrapper.DeleteUser)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/Users/{id}", wrapper.GetUserById)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/Users/{id}", wrapper.ReplaceUser)
	})

	return r
}

type GetGroupsRequestObject struct {
	Params GetGroupsParams
}

type GetGroupsResponseObject interface {
	VisitGetGroupsResponse(w http.ResponseWriter) error
}

type GetGroups200JSONResponse struct {
	Resources    []GroupResponse                   `json:"Resources"`
	ItemsPerPage int                               `json:"itemsPerPage"`
	Schemas      []GetGroups200JSONResponseSchemas `json:"schemas"`
	StartIndex   int                               `json:"startIndex"`
	TotalResults int                               `json:"totalResults"`
}

func (response GetGroups200JSONResponse) VisitGetGroupsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateGroupRequestObject struct {
	Body *CreateGroupJSONRequestBody
}

type CreateGroupResponseObject interface {
	VisitCreateGroupResponse(w http.ResponseWriter) error
}

type CreateGroup201JSONResponse GroupResponse

func (response CreateGroup201JSONResponse) VisitCreateGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type DeleteGroupRequestObject struct {
	Id string `json:"id"`
}

type DeleteGroupResponseObject interface {
	VisitDeleteGroupResponse(w http.ResponseWriter) error
}

type DeleteGroup204Response struct {
}

func (response DeleteGroup204Response) VisitDeleteGroupResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type GetGroupByIdRequestObject struct {
	Id string `json:"id"`
}

type GetGroupByIdResponseObject interface {
	VisitGetGroupByIdResponse(w http.ResponseWriter) error
}

type GetGroupById200JSONResponse GroupResponse

func (response GetGroupById200JSONResponse) VisitGetGroupByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ReplaceGroupRequestObject struct {
	Id   string `json:"id"`
	Body *ReplaceGroupJSONRequestBody
}

type ReplaceGroupResponseObject interface {
	VisitReplaceGroupResponse(w http.ResponseWriter) error
}

type ReplaceGroup200JSONResponse GroupResponse

func (response ReplaceGroup200JSONResponse) VisitReplaceGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetResourceTypesRequestObject struct {
}

type GetResourceTypesResponseObject interface {
	VisitGetResourceTypesResponse(w http.ResponseWriter) error
}

type GetResourceTypes200JSONResponse struct {
	Resources    []ResourceType                           `json:"Resources"`
	ItemsPerPage int                                      `json:"itemsPerPage"`
	Schemas      []GetResourceTypes200JSONResponseSchemas `json:"schemas"`
	StartIndex   int                                      `json:"startIndex"`
	TotalResults int                                      `json:"totalResults"`
}

func (response GetResourceTypes200JSONResponse) VisitGetResourceTypesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetSchemasRequestObject struct {
}

type GetSchemasResponseObject interface {
	VisitGetSchemasResponse(w http.ResponseWriter) error
}

type GetSchemas200JSONResponse struct {
	Resources    []Schema                           `json:"Resources"`
	ItemsPerPage int                                `json:"itemsPerPage"`
	Schemas      []GetSchemas200JSONResponseSchemas `json:"schemas"`
	StartIndex   int                                `json:"startIndex"`
	TotalResults int                                `json:"totalResults"`
}

func (response GetSchemas200JSONResponse) VisitGetSchemasResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetServiceProviderConfigRequestObject struct {
}

type GetServiceProviderConfigResponseObject interface {
	VisitGetServiceProviderConfigResponse(w http.ResponseWriter) error
}

type GetServiceProviderConfig200JSONResponse ServiceProviderConfig

func (response GetServiceProviderConfig200JSONResponse) VisitGetServiceProviderConfigResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersRequestObject struct {
	Params GetUsersParams
}

type GetUsersResponseObject interface {
	VisitGetUsersResponse(w http.ResponseWriter) error
}

type GetUsers200JSONResponse struct {
	Resources    []UserResponse                   `json:"Resources"`
	ItemsPerPage int                              `json:"itemsPerPage"`
	Schemas      []GetUsers200JSONResponseSchemas `json:"schemas"`
	StartIndex   int                              `json:"startIndex"`
	TotalResults int                              `json:"totalResults"`
}

func (response GetUsers200JSONResponse) VisitGetUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateUserRequestObject struct {
	Body *CreateUserJSONRequestBody
}

type CreateUserResponseObject interface {
	VisitCreateUserResponse(w http.ResponseWriter) error
}

type CreateUser201JSONResponse UserResponse

func (response CreateUser201JSONResponse) VisitCreateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type DeleteUserRequestObject struct {
	Id string `json:"id"`
}

type DeleteUserResponseObject interface {
	VisitDeleteUserResponse(w http.ResponseWriter) error
}

type DeleteUser204Response struct {
}

func (response DeleteUser204Response) VisitDeleteUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type GetUserByIdRequestObject struct {
	Id string `json:"id"`
}

type GetUserByIdResponseObject interface {
	VisitGetUserByIdResponse(w http.ResponseWriter) error
}

type GetUserById200JSONResponse UserResponse

func (response GetUserById200JSONResponse) VisitGetUserByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ReplaceUserRequestObject struct {
	Id   string `json:"id"`
	Body *ReplaceUserJSONRequestBody
}

type ReplaceUserResponseObject interface {
	VisitReplaceUserResponse(w http.ResponseWriter) error
}

type ReplaceUser200JSONResponse UserResponse

func (response ReplaceUser200JSONResponse) VisitReplaceUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Retrieve all groups
	// (GET /Groups)
	GetGroups(ctx context.Context, request GetGroupsRequestObject) (GetGroupsResponseObject, error)
	// Create a new group
	// (POST /Groups)
	CreateGroup(ctx context.Context, request CreateGroupRequestObject) (CreateGroupResponseObject, error)
	// Delete a group by ID
	// (DELETE /Groups/{id})
	DeleteGroup(ctx context.Context, request DeleteGroupRequestObject) (DeleteGroupResponseObject, error)
	// Retrieve a group by ID
	// (GET /Groups/{id})
	GetGroupById(ctx context.Context, request GetGroupByIdRequestObject) (GetGroupByIdResponseObject, error)
	// Replace a group by ID
	// (PUT /Groups/{id})
	ReplaceGroup(ctx context.Context, request ReplaceGroupRequestObject) (ReplaceGroupResponseObject, error)
	// Retrieve all resource types
	// (GET /ResourceTypes)
	GetResourceTypes(ctx context.Context, request GetResourceTypesRequestObject) (GetResourceTypesResponseObject, error)
	// Retrieve all schemas
	// (GET /Schemas)
	GetSchemas(ctx context.Context, request GetSchemasRequestObject) (GetSchemasResponseObject, error)
	// Retrieve the service provider configuration
	// (GET /ServiceProviderConfig)
	GetServiceProviderConfig(ctx context.Context, request GetServiceProviderConfigRequestObject) (GetServiceProviderConfigResponseObject, error)
	// Retrieve all users
	// (GET /Users)
	GetUsers(ctx context.Context, request GetUsersRequestObject) (GetUsersResponseObject, error)
	// Create a new user
	// (POST /Users)
	CreateUser(ctx context.Context, request CreateUserRequestObject) (CreateUserResponseObject, error)
	// Delete a user by ID
	// (DELETE /Users/{id})
	DeleteUser(ctx context.Context, request DeleteUserRequestObject) (DeleteUserResponseObject, error)
	// Retrieve a user by ID
	// (GET /Users/{id})
	GetUserById(ctx context.Context, request GetUserByIdRequestObject) (GetUserByIdResponseObject, error)
	// Replace a user by ID
	// (PUT /Users/{id})
	ReplaceUser(ctx context.Context, request ReplaceUserRequestObject) (ReplaceUserResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetGroups operation middleware
func (sh *strictHandler) GetGroups(w http.ResponseWriter, r *http.Request, params GetGroupsParams) {
	var request GetGroupsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request any) (any, error) {
		return sh.ssi.GetGroups(ctx, request.(GetGroupsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetGroups")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetGroupsResponseObject); ok {
		if err := validResponse.VisitGetGroupsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateGroup operation middleware
func (sh *strictHandler) CreateGroup(w http.ResponseWriter, r *http.Request) {
	var request CreateGroupRequestObject

	var body CreateGroupJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request any) (any, error) {
		return sh.ssi.CreateGroup(ctx, request.(CreateGroupRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateGroup")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateGroupResponseObject); ok {
		if err := validResponse.VisitCreateGroupResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteGroup operation middleware
func (sh *strictHandler) DeleteGroup(w http.ResponseWriter, r *http.Request, id string) {
	var request DeleteGroupRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request any) (any, error) {
		return sh.ssi.DeleteGroup(ctx, request.(DeleteGroupRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteGroup")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteGroupResponseObject); ok {
		if err := validResponse.VisitDeleteGroupResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetGroupById operation middleware
func (sh *strictHandler) GetGroupById(w http.ResponseWriter, r *http.Request, id string) {
	var request GetGroupByIdRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request any) (any, error) {
		return sh.ssi.GetGroupById(ctx, request.(GetGroupByIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetGroupById")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetGroupByIdResponseObject); ok {
		if err := validResponse.VisitGetGroupByIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ReplaceGroup operation middleware
func (sh *strictHandler) ReplaceGroup(w http.ResponseWriter, r *http.Request, id string) {
	var request ReplaceGroupRequestObject

	request.Id = id

	var body ReplaceGroupJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request any) (any, error) {
		return sh.ssi.ReplaceGroup(ctx, request.(ReplaceGroupRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ReplaceGroup")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ReplaceGroupResponseObject); ok {
		if err := validResponse.VisitReplaceGroupResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetResourceTypes operation middleware
func (sh *strictHandler) GetResourceTypes(w http.ResponseWriter, r *http.Request) {
	var request GetResourceTypesRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request any) (any, error) {
		return sh.ssi.GetResourceTypes(ctx, request.(GetResourceTypesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetResourceTypes")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetResourceTypesResponseObject); ok {
		if err := validResponse.VisitGetResourceTypesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetSchemas operation middleware
func (sh *strictHandler) GetSchemas(w http.ResponseWriter, r *http.Request) {
	var request GetSchemasRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request any) (any, error) {
		return sh.ssi.GetSchemas(ctx, request.(GetSchemasRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSchemas")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetSchemasResponseObject); ok {
		if err := validResponse.VisitGetSchemasResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetServiceProviderConfig operation middleware
func (sh *strictHandler) GetServiceProviderConfig(w http.ResponseWriter, r *http.Request) {
	var request GetServiceProviderConfigRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request any) (any, error) {
		return sh.ssi.GetServiceProviderConfig(ctx, request.(GetServiceProviderConfigRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetServiceProviderConfig")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetServiceProviderConfigResponseObject); ok {
		if err := validResponse.VisitGetServiceProviderConfigResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetUsers operation middleware
func (sh *strictHandler) GetUsers(w http.ResponseWriter, r *http.Request, params GetUsersParams) {
	var request GetUsersRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request any) (any, error) {
		return sh.ssi.GetUsers(ctx, request.(GetUsersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUsers")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetUsersResponseObject); ok {
		if err := validResponse.VisitGetUsersResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateUser operation middleware
func (sh *strictHandler) CreateUser(w http.ResponseWriter, r *http.Request) {
	var request CreateUserRequestObject

	var body CreateUserJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request any) (any, error) {
		return sh.ssi.CreateUser(ctx, request.(CreateUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateUser")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateUserResponseObject); ok {
		if err := validResponse.VisitCreateUserResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteUser operation middleware
func (sh *strictHandler) DeleteUser(w http.ResponseWriter, r *http.Request, id string) {
	var request DeleteUserRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request any) (any, error) {
		return sh.ssi.DeleteUser(ctx, request.(DeleteUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteUser")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteUserResponseObject); ok {
		if err := validResponse.VisitDeleteUserResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetUserById operation middleware
func (sh *strictHandler) GetUserById(w http.ResponseWriter, r *http.Request, id string) {
	var request GetUserByIdRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request any) (any, error) {
		return sh.ssi.GetUserById(ctx, request.(GetUserByIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUserById")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetUserByIdResponseObject); ok {
		if err := validResponse.VisitGetUserByIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ReplaceUser operation middleware
func (sh *strictHandler) ReplaceUser(w http.ResponseWriter, r *http.Request, id string) {
	var request ReplaceUserRequestObject

	request.Id = id

	var body ReplaceUserJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request any) (any, error) {
		return sh.ssi.ReplaceUser(ctx, request.(ReplaceUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ReplaceUser")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ReplaceUserResponseObject); ok {
		if err := validResponse.VisitReplaceUserResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}
