/* tslint:disable */
/* eslint-disable */
/**
 * Ticketing System API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Users
 */
export interface Users {
    /**
     * 
     * @type {string}
     * @memberof Users
     */
    avatar: string;
    /**
     * 
     * @type {string}
     * @memberof Users
     */
    created: string;
    /**
     * 
     * @type {string}
     * @memberof Users
     */
    email: string;
    /**
     * 
     * @type {boolean}
     * @memberof Users
     */
    emailVisibility: boolean;
    /**
     * 
     * @type {string}
     * @memberof Users
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof Users
     */
    lastLoginAlertSentAt: string;
    /**
     * 
     * @type {string}
     * @memberof Users
     */
    lastResetSentAt: string;
    /**
     * 
     * @type {string}
     * @memberof Users
     */
    lastVerificationSentAt: string;
    /**
     * 
     * @type {string}
     * @memberof Users
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof Users
     */
    passwordHash: string;
    /**
     * 
     * @type {string}
     * @memberof Users
     */
    tokenKey: string;
    /**
     * 
     * @type {string}
     * @memberof Users
     */
    updated: string;
    /**
     * 
     * @type {string}
     * @memberof Users
     */
    username: string;
    /**
     * 
     * @type {boolean}
     * @memberof Users
     */
    verified: boolean;
}

/**
 * Check if a given object implements the Users interface.
 */
export function instanceOfUsers(value: object): value is Users {
    if (!('avatar' in value) || value['avatar'] === undefined) return false;
    if (!('created' in value) || value['created'] === undefined) return false;
    if (!('email' in value) || value['email'] === undefined) return false;
    if (!('emailVisibility' in value) || value['emailVisibility'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('lastLoginAlertSentAt' in value) || value['lastLoginAlertSentAt'] === undefined) return false;
    if (!('lastResetSentAt' in value) || value['lastResetSentAt'] === undefined) return false;
    if (!('lastVerificationSentAt' in value) || value['lastVerificationSentAt'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('passwordHash' in value) || value['passwordHash'] === undefined) return false;
    if (!('tokenKey' in value) || value['tokenKey'] === undefined) return false;
    if (!('updated' in value) || value['updated'] === undefined) return false;
    if (!('username' in value) || value['username'] === undefined) return false;
    if (!('verified' in value) || value['verified'] === undefined) return false;
    return true;
}

export function UsersFromJSON(json: any): Users {
    return UsersFromJSONTyped(json, false);
}

export function UsersFromJSONTyped(json: any, ignoreDiscriminator: boolean): Users {
    if (json == null) {
        return json;
    }
    return {
        
        'avatar': json['avatar'],
        'created': json['created'],
        'email': json['email'],
        'emailVisibility': json['emailVisibility'],
        'id': json['id'],
        'lastLoginAlertSentAt': json['lastLoginAlertSentAt'],
        'lastResetSentAt': json['lastResetSentAt'],
        'lastVerificationSentAt': json['lastVerificationSentAt'],
        'name': json['name'],
        'passwordHash': json['passwordHash'],
        'tokenKey': json['tokenKey'],
        'updated': json['updated'],
        'username': json['username'],
        'verified': json['verified'],
    };
}

export function UsersToJSON(json: any): Users {
    return UsersToJSONTyped(json, false);
}

export function UsersToJSONTyped(value?: Users | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'avatar': value['avatar'],
        'created': value['created'],
        'email': value['email'],
        'emailVisibility': value['emailVisibility'],
        'id': value['id'],
        'lastLoginAlertSentAt': value['lastLoginAlertSentAt'],
        'lastResetSentAt': value['lastResetSentAt'],
        'lastVerificationSentAt': value['lastVerificationSentAt'],
        'name': value['name'],
        'passwordHash': value['passwordHash'],
        'tokenKey': value['tokenKey'],
        'updated': value['updated'],
        'username': value['username'],
        'verified': value['verified'],
    };
}

