/* tslint:disable */
/* eslint-disable */
/**
 * Ticketing System API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { mapValues } from '../runtime'

/**
 *
 * @export
 * @interface S3Config
 */
export interface S3Config {
  /**
   *
   * @type {boolean}
   * @memberof S3Config
   */
  enabled: boolean
  /**
   *
   * @type {string}
   * @memberof S3Config
   */
  bucket: string
  /**
   *
   * @type {string}
   * @memberof S3Config
   */
  region: string
  /**
   *
   * @type {string}
   * @memberof S3Config
   */
  endpoint: string
  /**
   *
   * @type {string}
   * @memberof S3Config
   */
  accessKey: string
  /**
   *
   * @type {string}
   * @memberof S3Config
   */
  secret: string
  /**
   *
   * @type {boolean}
   * @memberof S3Config
   */
  forcePathStyle: boolean
}

/**
 * Check if a given object implements the S3Config interface.
 */
export function instanceOfS3Config(value: object): value is S3Config {
  if (!('enabled' in value) || value['enabled'] === undefined) return false
  if (!('bucket' in value) || value['bucket'] === undefined) return false
  if (!('region' in value) || value['region'] === undefined) return false
  if (!('endpoint' in value) || value['endpoint'] === undefined) return false
  if (!('accessKey' in value) || value['accessKey'] === undefined) return false
  if (!('secret' in value) || value['secret'] === undefined) return false
  if (!('forcePathStyle' in value) || value['forcePathStyle'] === undefined) return false
  return true
}

export function S3ConfigFromJSON(json: any): S3Config {
  return S3ConfigFromJSONTyped(json, false)
}

export function S3ConfigFromJSONTyped(json: any, ignoreDiscriminator: boolean): S3Config {
  if (json == null) {
    return json
  }
  return {
    enabled: json['enabled'],
    bucket: json['bucket'],
    region: json['region'],
    endpoint: json['endpoint'],
    accessKey: json['access_key'],
    secret: json['secret'],
    forcePathStyle: json['force_path_style']
  }
}

export function S3ConfigToJSON(json: any): S3Config {
  return S3ConfigToJSONTyped(json, false)
}

export function S3ConfigToJSONTyped(
  value?: S3Config | null,
  ignoreDiscriminator: boolean = false
): any {
  if (value == null) {
    return value
  }

  return {
    enabled: value['enabled'],
    bucket: value['bucket'],
    region: value['region'],
    endpoint: value['endpoint'],
    access_key: value['accessKey'],
    secret: value['secret'],
    force_path_style: value['forcePathStyle']
  }
}
