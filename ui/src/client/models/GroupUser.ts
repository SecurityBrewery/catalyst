/* tslint:disable */
/* eslint-disable */
/**
 * Ticketing System API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { mapValues } from '../runtime'

/**
 *
 * @export
 * @interface GroupUser
 */
export interface GroupUser {
  /**
   *
   * @type {string}
   * @memberof GroupUser
   */
  id: string
  /**
   *
   * @type {string}
   * @memberof GroupUser
   */
  username: string
  /**
   *
   * @type {string}
   * @memberof GroupUser
   */
  avatar: string
  /**
   *
   * @type {string}
   * @memberof GroupUser
   */
  email: string
  /**
   *
   * @type {boolean}
   * @memberof GroupUser
   */
  emailVisibility: boolean
  /**
   *
   * @type {string}
   * @memberof GroupUser
   */
  lastLoginAlertSentAt: string
  /**
   *
   * @type {string}
   * @memberof GroupUser
   */
  lastResetSentAt: string
  /**
   *
   * @type {string}
   * @memberof GroupUser
   */
  lastVerificationSentAt: string
  /**
   *
   * @type {string}
   * @memberof GroupUser
   */
  name: string
  /**
   *
   * @type {boolean}
   * @memberof GroupUser
   */
  verified: boolean
  /**
   *
   * @type {string}
   * @memberof GroupUser
   */
  type: string
  /**
   *
   * @type {string}
   * @memberof GroupUser
   */
  created: string
  /**
   *
   * @type {string}
   * @memberof GroupUser
   */
  updated: string
}

/**
 * Check if a given object implements the GroupUser interface.
 */
export function instanceOfGroupUser(value: object): value is GroupUser {
  if (!('id' in value) || value['id'] === undefined) return false
  if (!('username' in value) || value['username'] === undefined) return false
  if (!('avatar' in value) || value['avatar'] === undefined) return false
  if (!('email' in value) || value['email'] === undefined) return false
  if (!('emailVisibility' in value) || value['emailVisibility'] === undefined) return false
  if (!('lastLoginAlertSentAt' in value) || value['lastLoginAlertSentAt'] === undefined)
    return false
  if (!('lastResetSentAt' in value) || value['lastResetSentAt'] === undefined) return false
  if (!('lastVerificationSentAt' in value) || value['lastVerificationSentAt'] === undefined)
    return false
  if (!('name' in value) || value['name'] === undefined) return false
  if (!('verified' in value) || value['verified'] === undefined) return false
  if (!('type' in value) || value['type'] === undefined) return false
  if (!('created' in value) || value['created'] === undefined) return false
  if (!('updated' in value) || value['updated'] === undefined) return false
  return true
}

export function GroupUserFromJSON(json: any): GroupUser {
  return GroupUserFromJSONTyped(json, false)
}

export function GroupUserFromJSONTyped(json: any, ignoreDiscriminator: boolean): GroupUser {
  if (json == null) {
    return json
  }
  return {
    id: json['id'],
    username: json['username'],
    avatar: json['avatar'],
    email: json['email'],
    emailVisibility: json['emailVisibility'],
    lastLoginAlertSentAt: json['lastLoginAlertSentAt'],
    lastResetSentAt: json['lastResetSentAt'],
    lastVerificationSentAt: json['lastVerificationSentAt'],
    name: json['name'],
    verified: json['verified'],
    type: json['type'],
    created: json['created'],
    updated: json['updated']
  }
}

export function GroupUserToJSON(json: any): GroupUser {
  return GroupUserToJSONTyped(json, false)
}

export function GroupUserToJSONTyped(
  value?: GroupUser | null,
  ignoreDiscriminator: boolean = false
): any {
  if (value == null) {
    return value
  }

  return {
    id: value['id'],
    username: value['username'],
    avatar: value['avatar'],
    email: value['email'],
    emailVisibility: value['emailVisibility'],
    lastLoginAlertSentAt: value['lastLoginAlertSentAt'],
    lastResetSentAt: value['lastResetSentAt'],
    lastVerificationSentAt: value['lastVerificationSentAt'],
    name: value['name'],
    verified: value['verified'],
    type: value['type'],
    created: value['created'],
    updated: value['updated']
  }
}
