/* tslint:disable */
/* eslint-disable */
/**
 * Ticketing System API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Types
 */
export interface Types {
    /**
     * 
     * @type {string}
     * @memberof Types
     */
    created: string;
    /**
     * 
     * @type {string}
     * @memberof Types
     */
    icon: string;
    /**
     * 
     * @type {string}
     * @memberof Types
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof Types
     */
    plural: string;
    /**
     * 
     * @type {object}
     * @memberof Types
     */
    schema: object;
    /**
     * 
     * @type {string}
     * @memberof Types
     */
    singular: string;
    /**
     * 
     * @type {string}
     * @memberof Types
     */
    updated: string;
}

/**
 * Check if a given object implements the Types interface.
 */
export function instanceOfTypes(value: object): value is Types {
    if (!('created' in value) || value['created'] === undefined) return false;
    if (!('icon' in value) || value['icon'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('plural' in value) || value['plural'] === undefined) return false;
    if (!('schema' in value) || value['schema'] === undefined) return false;
    if (!('singular' in value) || value['singular'] === undefined) return false;
    if (!('updated' in value) || value['updated'] === undefined) return false;
    return true;
}

export function TypesFromJSON(json: any): Types {
    return TypesFromJSONTyped(json, false);
}

export function TypesFromJSONTyped(json: any, ignoreDiscriminator: boolean): Types {
    if (json == null) {
        return json;
    }
    return {
        
        'created': json['created'],
        'icon': json['icon'],
        'id': json['id'],
        'plural': json['plural'],
        'schema': json['schema'],
        'singular': json['singular'],
        'updated': json['updated'],
    };
}

export function TypesToJSON(json: any): Types {
    return TypesToJSONTyped(json, false);
}

export function TypesToJSONTyped(value?: Types | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'created': value['created'],
        'icon': value['icon'],
        'id': value['id'],
        'plural': value['plural'],
        'schema': value['schema'],
        'singular': value['singular'],
        'updated': value['updated'],
    };
}

