/* tslint:disable */
/* eslint-disable */
/**
 * Ticketing System API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { mapValues } from '../runtime'
import type { S3Config } from './S3Config'
import {
  S3ConfigFromJSON,
  S3ConfigFromJSONTyped,
  S3ConfigToJSON,
  S3ConfigToJSONTyped
} from './S3Config'
import type { SettingsBackups } from './SettingsBackups'
import {
  SettingsBackupsFromJSON,
  SettingsBackupsFromJSONTyped,
  SettingsBackupsToJSON,
  SettingsBackupsToJSONTyped
} from './SettingsBackups'
import type { SettingsLogs } from './SettingsLogs'
import {
  SettingsLogsFromJSON,
  SettingsLogsFromJSONTyped,
  SettingsLogsToJSON,
  SettingsLogsToJSONTyped
} from './SettingsLogs'
import type { SettingsMeta } from './SettingsMeta'
import {
  SettingsMetaFromJSON,
  SettingsMetaFromJSONTyped,
  SettingsMetaToJSON,
  SettingsMetaToJSONTyped
} from './SettingsMeta'
import type { SettingsSmtp } from './SettingsSmtp'
import {
  SettingsSmtpFromJSON,
  SettingsSmtpFromJSONTyped,
  SettingsSmtpToJSON,
  SettingsSmtpToJSONTyped
} from './SettingsSmtp'

/**
 *
 * @export
 * @interface Settings
 */
export interface Settings {
  /**
   *
   * @type {SettingsMeta}
   * @memberof Settings
   */
  meta: SettingsMeta
  /**
   *
   * @type {SettingsLogs}
   * @memberof Settings
   */
  logs: SettingsLogs
  /**
   *
   * @type {SettingsSmtp}
   * @memberof Settings
   */
  smtp: SettingsSmtp
  /**
   *
   * @type {S3Config}
   * @memberof Settings
   */
  s3: S3Config
  /**
   *
   * @type {SettingsBackups}
   * @memberof Settings
   */
  backups: SettingsBackups
}

/**
 * Check if a given object implements the Settings interface.
 */
export function instanceOfSettings(value: object): value is Settings {
  if (!('meta' in value) || value['meta'] === undefined) return false
  if (!('logs' in value) || value['logs'] === undefined) return false
  if (!('smtp' in value) || value['smtp'] === undefined) return false
  if (!('s3' in value) || value['s3'] === undefined) return false
  if (!('backups' in value) || value['backups'] === undefined) return false
  return true
}

export function SettingsFromJSON(json: any): Settings {
  return SettingsFromJSONTyped(json, false)
}

export function SettingsFromJSONTyped(json: any, ignoreDiscriminator: boolean): Settings {
  if (json == null) {
    return json
  }
  return {
    meta: SettingsMetaFromJSON(json['meta']),
    logs: SettingsLogsFromJSON(json['logs']),
    smtp: SettingsSmtpFromJSON(json['smtp']),
    s3: S3ConfigFromJSON(json['s3']),
    backups: SettingsBackupsFromJSON(json['backups'])
  }
}

export function SettingsToJSON(json: any): Settings {
  return SettingsToJSONTyped(json, false)
}

export function SettingsToJSONTyped(
  value?: Settings | null,
  ignoreDiscriminator: boolean = false
): any {
  if (value == null) {
    return value
  }

  return {
    meta: SettingsMetaToJSON(value['meta']),
    logs: SettingsLogsToJSON(value['logs']),
    smtp: SettingsSmtpToJSON(value['smtp']),
    s3: S3ConfigToJSON(value['s3']),
    backups: SettingsBackupsToJSON(value['backups'])
  }
}
